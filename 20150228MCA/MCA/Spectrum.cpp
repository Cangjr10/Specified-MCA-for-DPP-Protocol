#include "stdafx.h"
#include "Spectrum.h"
#include <cmath>
//¹¹Ôìº¯Êý
CSpectrum::CSpectrum():Index_SelectedROI(0),a0(0.000021898),b0(1.4341),c0(0.5072),a(0),b(1),c(0),MeasureTime(0),LiveTime(0)
{
	SpectrumOrigin.resize(2048);
	SpectrumIntrinsic.resize(2048);
	SNIP_Background.resize(1000);
	RebinedLiveSpectrum.resize(1000);
	RebinedIntrinsicSpectrum.resize(1000);
	float IntrinsicSpectrum_temp[2048]={0,0,0,0,0,0,0,0,0,0,115233,249508,251548,263727,279345,293812,298126,292646,286244,285165,338742,635886,1703615,4018869,6688680,7132298,4951159,2245556,759167,303398,222607,210352,206635,204059,201908,200172,200013,197182,197216,196974,197268,196728,197429,197812,198214,197812,198476,199299,202457,204035,206596,204099,201885,197830,194103,192281,191098,189766,190304,190462,189600,188325,186647,184818,183301,181770,180617,182252,182307,180988,180164,179783,179462,177568,177916,177500,177815,176908,176010,174739,173983,173122,173207,171542,171982,171791,171241,170486,170937,166427,166836,164898,163874,162563,162621,162232,162561,160112,159657,157543,156959,155398,154640,154035,153671,151060,150789,149571,148718,147342,146965,144981,143801,142923,143313,142031,141353,139838,139469,138226,137477,134661,134105,133635,131894,130132,129425,128612,127852,124805,124261,122864,122789,120364,120495,119095,118362,116044,114696,113670,112687,111019,109880,108565,107144,104795,104069,102308,101836,99598,98689,97880,98858,95462,94949,94450,92572,91127,89307,88917,87894,85811,85130,83861,82191,81177,79874,78492,78288,76709,75371,74630,74180,73187,72982,72683,71895,71522,71090,70338,70022,69379,69440,68603,68909,67137,67518,67743,67452,66893,66958,66915,67119,66288,65959,66010,66194,65655,65231,65013,64890,64926,64909,64474,64821,64395,63957,63957,64229,64246,63934,63490,63060,63704,62885,63153,63553,63144,61928,62460,62063,62670,62149,61716,62108,62213,61538,61454,61647,61457,61195,61646,61607,62039,60834,61403,61650,61411,61709,61410,61602,61196,61066,61600,61534,62345,61515,61124,60600,61510,60188,60537,60475,59975,59930,60726,60276,60351,60173,60187,59814,60197,60277,60634,60506,60733,60090,60534,60046,60487,59588,60052,60692,60496,59540,59703,59813,60453,59590,59550,59555,60248,59278,59222,59598,59766,59571,59972,59685,59524,59331,59248,59092,59523,58956,58975,58575,58854,58225,58228,58565,58606,58579,57778,58604,58726,58688,59103,59508,59579,59419,59859,59781,59642,59206,59013,59400,58614,58896,58772,58464,58706,58155,58299,57567,58437,58040,58082,57765,58200,57477,57727,57905,57226,57817,57301,57361,57486,58045,57453,57758,57789,57463,57532,58096,58870,58758,58123,58777,58828,59270,59437,59151,59195,59437,59239,58992,58862,58607,58018,57912,57653,57194,56544,56745,56570,56771,56684,56721,56638,56509,56292,56844,56905,56991,56996,57424,57558,57514,56703,56826,56918,57066,56830,56973,56733,56528,56454,56740,56393,56624,56530,56605,56711,56776,56194,56233,56051,56527,56278,56193,55987,56358,55942,56507,55788,55957,55396,55889,55932,56488,55628,55527,55085,55473,55354,54717,54880,54954,54258,54427,54160,54191,53632,53252,53573,53746,52891,51917,52188,51978,51734,51810,51667,51949,50916,51351,50618,50563,50166,49845,49839,50110,49543,49119,48950,49269,49220,48721,48976,48378,48452,47735,47846,48100,48160,47538,47261,47737,46766,46529,46687,46711,46372,46103,46131,45718,45765,45476,45024,45074,45383,44110,44024,44399,44122,43892,43596,43488,43005,42740,42470,42282,42234,41754,42073,41679,41474,41313,41375,41549,41116,40622,40951,40784,40637,40076,39888,40042,40037,38854,39458,39112,39221,38652,38924,38447,38182,38215,38267,38111,37866,37911,37811,37751,37334,37341,37253,37179,37002,36892,36870,37116,37176,36995,37383,37163,37149,37416,37720,37881,39244,39773,41476,42995,45895,48898,52896,58271,64530,70065,78044,85915,94844,101916,111305,118615,125568,131097,137547,141771,145493,147841,150852,151583,152843,151685,153661,152988,153604,152885,152144,151381,152062,149626,150438,149166,150095,148681,148600,147861,148814,145094,146341,145890,144822,143476,144083,143124,143898,141925,142073,142555,141513,139927,139956,139807,139405,137796,137661,137244,137349,135538,135532,134938,135564,134226,134042,133614,132692,132214,131710,131516,131189,130422,128452,129408,128624,127575,126500,125978,125968,124832,124296,124288,123541,123363,121698,122284,121862,120823,118592,119338,119021,119305,117275,116534,116857,116337,115186,114633,114699,113933,113043,113131,113019,112760,111749,111834,111390,111102,109919,109951,108594,109029,106800,106845,106777,105193,104099,103226,102771,101916,100831,101597,100435,100092,99224,98677,98430,98661,97802,97050,96149,95874,94187,92997,92470,92529,88266,88699,86194,84940,82887,82074,80535,79433,77407,76926,75027,74512,72355,72174,70409,70106,68240,67280,66119,65623,63786,63272,62008,61037,59564,58902,57920,57159,55141,54898,54021,53655,51304,50973,49417,49657,47749,47593,46983,45468,44648,44055,43328,42915,41995,41119,40410,40262,39254,38754,38571,38204,37377,37383,37044,36809,36337,36150,36134,35959,35857,35983,35720,36709,35626,35716,35711,35841,35353,35731,35639,36178,35236,35477,35524,35894,35453,35776,35926,35812,36039,35693,36100,35945,35783,36201,36167,36249,36095,36598,36366,36896,36270,36814,36349,36978,36745,36517,37126,37051,36457,36936,36874,36983,37540,36949,37250,37356,37048,37118,36932,37434,37082,37367,37179,37660,37530,37131,37633,37286,36928,37298,37476,37580,37419,37259,37190,37549,37178,36612,36771,37051,36781,36811,36666,36952,36725,36466,36059,36324,36387,35948,36139,35984,35460,35222,35688,34963,35464,34917,35016,35153,34810,34047,34533,34350,34417,33855,33734,33781,33346,32754,32777,32460,32165,31879,31396,31241,30892,30475,30268,29969,29767,29501,29116,28714,28497,27783,27483,27325,26990,26166,25815,25455,25038,24318,24049,23520,23252,22511,22293,21838,21714,20510,20216,19684,19370,18511,18607,18067,17781,17101,17039,16427,16275,15510,15405,15061,14813,14431,14108,13875,13599,13407,12980,12739,12605,12140,12031,11693,11637,11241,11083,10951,10633,10216,9930,9656,9496,9308,9118,9064,8807,8386,8259,8163,7994,7682,7539,7462,7027,7002,6926,6470,6389,6310,6050,5974,5722,5594,5498,5302,5228,5109,4955,4893,4804,4613,4323,4224,4274,4170,4094,3943,3981,3865,3724,3717,3681,3625,3500,3458,3409,3430,3299,3326,3306,3279,3391,3249,3396,3510,3557,3515,3803,3993,4190,4515,4816,5463,5944,6821,7872,9210,11178,12966,15858,19181,23666,29029,35765,43373,52693,62847,75834,89179,103940,121375,138179,154894,172083,188868,205723,219969,231327,243226,252330,258696,262100,265590,269458,269693,267069,271916,276084,282153,289947,302902,316544,335236,350869,374183,394284,415178,431233,451505,462667,470336,466273,467745,457343,444964,421716,401501,373602,347041,312175,283266,252012,224201,193856,168516,144386,124687,103912,88308,74287,62098,51271,42881,35749,29626,24137,20629,17123,14280,11828,9925,8471,7183,5886,5005,4313,3779,3258,2794,2444,2041,1858,1667,1415,1401,1208,1097,1110,1044,926,837,923,876,823,834,811,821,773,817,746,776,762,752,768,739,707,690,678,673,709,713,650,673,667,638,678,652,714,660,659,671,617,642,623,657,599,647,613,579,574,578,555,570,576,516,552,572,571,541,556,510,501,549,598,527,532,574,534,500,568,572,516,572,532,560,506,544,513,541,549,559,563,556,549,564,578,608,599,577,578,609,580,597,612,676,656,647,662,657,648,672,685,664,712,675,718,725,727,733,732,722,745,747,797,768,774,772,756,844,837,802,903,859,845,934,991,926,948,960,980,988,988,987,1053,993,1059,1192,1132,1181,1226,1214,1279,1228,1248,1393,1323,1352,1371,1459,1509,1451,1512,1555,1666,1536,1709,1708,1714,1742,1792,1757,1750,1779,1813,1832,1893,1807,1808,1776,1875,1884,1875,1869,1840,1880,1965,1979,1957,1983,2043,2097,2132,2221,2257,2223,2221,2191,2381,2337,2436,2394,2464,2568,2637,2641,2630,2695,2709,2809,2789,3015,2913,3017,2948,3150,3235,3251,3418,3409,3580,3620,3772,3895,3921,3997,4080,4309,4304,4571,4820,4740,4864,5012,5229,5350,5403,5542,5752,5860,6122,6154,6440,6484,6729,6816,7031,7096,7372,7386,7415,7698,7798,7961,8005,8080,8230,8466,8480,8617,8761,9129,8996,9177,9408,9266,9405,9740,9782,9882,9947,10162,10264,10535,10700,10804,10804,10882,10908,11019,11176,11385,11350,11667,11603,11796,11805,11957,12046,12280,12250,12583,12450,12338,12626,12936,12721,13081,13037,13140,13416,13530,13728,13793,14355,14334,14514,14742,15209,15305,15373,15745,16486,16735,17041,17375,17690,17906,18488,18958,19443,19985,20339,21106,21696,21471,22407,22977,23349,23747,24209,24460,25021,24997,25276,25693,25508,25852,25941,26318,26089,25562,25577,25068,25003,24597,24075,23922,23204,22422,22540,21830,21192,20471,19910,19414,18696,17796,17616,16846,16283,15774,15361,15074,14456,13927,14029,13645,13227,13033,12826,12740,12588,12228,12597,12454,12583,12473,12462,12399,12829,12573,12589,12772,12774,12858,12873,13064,13356,12948,13006,13084,13518,12991,13172,12972,13263,12934,12886,12801,13246,12696,12415,12575,13183,12350,12342,12227,12544,12407,12370,12149,12360,12305,12325,12410,12452,12478,12693,12853,12722,12550,12606,12758,12980,12886,13109,13257,13590,13452,13807,13872,14019,14131,14096,14617,14681,14391,14941,15029,15331,15129,15260,15404,15573,15432,15713,15644,15884,15597,15843,15795,15961,15715,15776,15525,16069,15787,15870,15784,15795,15460,15609,15639,15433,15363,15505,15496,16029,15430,15395,15437,15491,15581,15586,15771,15998,15715,16109,16017,16311,16501,16703,16895,17245,17338,17727,17863,18281,18349,18812,19023,19825,19416,19844,20381,20905,20947,21166,21651,22251,22082,22089,22465,22523,22245,22762,22535,22620,22099,22343,21787,21713,21161,20519,20564,20087,19470,19091,18497,18424,17543,16972,16391,16306,15364,15204,14532,14433,13964,13769,13372,13551,13000,12376,12510,12508,12639,12391,12344,12375,12395,12415,12626,12688,12901,13060,13247,13413,13582,13839,14274,14457,14847,14929,15261,15361,15844,15780,16242,16531,16294,16406,16504,16698,16518,16390,16282,16420,16125,15872,15557,15249,15069,14268,14073,13753,13155,12717,11992,11833,11453,10753,10713,9839,9467,8797,8614,8403,8016,7452,7261,7174,6854,6497,6481,6191,6205,5825,5928,5625,5860,5576,5569,5872,5659,5618,5740,5822,5810,5885,6024,6021,6096,6083,6231,6366,6478,6506,6652,6648,6694,6855,6973,6994,7068,7318,7378,7498,7534,7387,7719,7744,7717,7875,7863,7976,8161,8028,8209,8184,8264,8316,8288,8418,8244,8183,8555,8335,8339,8207,8356,8435,8412,8459,8365,8549,8693,8607,8518,8700,8740,8428,8654,8629,8489,8620,8642,8634,8599,8548,8545,8610,8500,8497,8405,8462,8502,8198,8394,8464,8385,8217,8449,8359,8627,8321,8393,8261,8420,8373,8613,8672,8545,8601,8801,8839,9025,9047,9157,9268,9404,9635,9695,9835,10053,10138,10413,10638,10910,11016,11332,11797,11725,11962,12168,12564,12701,12896,13408,13744,13970,14094,14352,14818,15397,15351,15561,16214,16442,16261,16748,17060,17265,17242,17609,17426,17671,17751,17613,17725,17762,17187,17289,17035,16712,16704,16368,15967,15497,14734,14536,14087,13587,12772,12507,11796,11235,10612,9944,9409,9145,8390,7712,7361,6880,6330,5933,5638,5187,4784,4424,4173,3729,3427,3174,2953,2755,2500,2372,2129,2061,1925,1728,1650,1538,1372,1293,1284,1222,1068,976,922,894,830,720,772,695,625,620,593,525,518,511,425,430,388,380,344,352,328,328,286,299,254,222,273,226,219,181,193,208,197,158,167,130,162,143,154,122,123,128,131,111,126,119,97,96,89,92,99,91,73,87,82,81,79,73,84,70,67,87,68,69,72,61,63,71,61,61,54,53,47,55,49,55,58,60,68,60,55,57,56,53,54,57,50,43,61,52,59,52,52,49,54,52,64,59,59,44,43,56,67,52,37,48,43,54,46,38,38,41,46,37,51,39,37,35,44,53,53,54,62,60,61,72,56,70,77,75,52,60,53,53,55,52,52,48,50,39,52,63,45,53,55,40,53,59,45,56,56,49,56,49,50,46,54,53,65,49,56,53,54,46,52,52,61,52,38,70,53,64,62,45,53,40,39,51,70,65,62,40,44,52,54,48,60,64,52,49,40,51,49,57,41,58,49,44,45,35,49,45,60,41,47,47,51,45,48,45,46,54,49,49,36,42,49,37,53,48,37,41,44};
	for(int i=0;i<2048;i++)//Ç¦ÊÒ±¾µ×
		SpectrumIntrinsic[i] = IntrinsicSpectrum_temp[i];
	float RebinedIntrinsicSpectrum_temp[1000]={0.000,4797.873,217.298,5100.785,107620.383,283900.375,348473.281,181897.531,125646.773,1015562.438,3364838.750,6354476.500,8067582.000,7184833.000,4333267.000,1457577.125,355032.938,381312.563,255741.813,442263.313,452141.094,419939.063,411903.875,418977.906,423046.188,419897.938,412209.500,404069.531,397697.500,392991.188,388710.125,384391.219,380610.844,377815.781,375706.500,373680.813,371370.250,368659.250,365713.250,362907.906,360389.469,357772.438,354374.625,350009.469,345294.500,340970.000,337106.313,333183.469,328829.969,324083.250,319379.469,314721.938,310052.844,305505.719,301315.344,297486.438,293656.563,289378.875,284491.313,279174.156,273700.906,268155.625,262831.594,257713.109,252764.828,247792.781,242562.188,236954.219,230984.984,224782.188,218634.609,212929.938,207873.641,203180.438,198506.219,193429.000,187982.219,182393.031,176834.438,171380.609,166134.297,161314.000,157175.969,153853.328,151241.922,149031.375,146986.000,144992.766,143137.766,141588.500,140438.547,139609.219,138896.750,138113.688,137210.641,136273.766,135435.844,134752.797,134195.500,133692.953,133179.125,132632.344,132054.891,131444.813,130799.578,130147.148,129546.859,129023.031,128566.000,128169.031,127879.492,127732.352,127690.078,127671.266,127645.148,127654.469,127732.422,127784.016,127601.938,127067.664,126301.969,125590.273,125135.938,124942.617,124920.695,125011.648,125166.297,125286.328,125271.734,125115.734,124903.625,124695.375,124481.063,124230.406,123960.563,123743.805,123646.203,123648.578,123636.781,123484.953,123139.563,122644.352,122076.922,121532.414,121121.414,120975.641,121203.469,121810.063,122602.422,123249.625,123466.648,123193.141,122611.484,121947.266,121340.391,120844.375,120469.859,120181.898,119911.633,119623.773,119347.922,119159.422,119099.203,119177.984,119416.703,119861.930,120505.867,121260.953,121984.875,122519.516,122697.625,122378.047,121522.516,120271.516,118946.273,117875.375,117224.313,116979.313,117054.813,117376.656,117811.727,118156.094,118242.836,118055.297,117725.094,117394.617,117153.367,117019.281,116951.070,116862.750,116702.336,116490.484,116288.336,116114.875,115938.031,115766.148,115601.313,115407.516,115095.242,114611.352,113983.391,113299.531,112605.297,111865.914,110996.828,109968.711,108867.141,107861.844,107043.992,106302.820,105468.852,104502.711,103520.203,102661.797,101969.180,101357.109,100739.063,100089.781,99443.367,98797.203,98111.336,97359.000,96576.852,95824.133,95087.766,94303.969,93454.961,92571.227,91696.055,90813.563,89864.750,88832.117,87804.172,86903.500,86199.281,85653.672,85170.047,84638.672,83991.563,83224.898,82393.141,81559.484,80789.578,80089.055,79463.516,78917.711,78436.273,77961.430,77447.703,76924.750,76501.000,76256.219,76174.828,76178.391,76315.195,76933.109,78824.711,83277.563,92136.188,107015.453,128883.430,157316.250,190146.141,223882.750,254750.563,279810.531,297662.563,308554.813,313888.906,315443.000,314769.063,312989.719,310831.063,308733.875,306728.813,304589.156,302139.469,299560.500,297156.594,295110.969,293279.125,291385.031,289219.406,286799.875,284309.688,281931.688,279768.781,277779.938,275847.281,273841.281,271678.063,269336.938,266771.938,264028.250,261201.344,258560.438,256164.672,253897.188,251582.766,249111.281,246563.750,244042.266,241578.188,239163.125,236835.625,234727.406,232924.344,231360.875,229805.094,227988.594,225759.406,223054.844,219913.719,216454.656,213031.297,209916.172,207319.047,205211.641,203355.750,201406.969,198993.438,195777.703,191540.188,186258.109,180191.844,173791.172,167512.156,161636.063,156205.969,151124.125,146280.531,141597.969,137000.500,132403.031,127903.875,123471.125,119139.469,114896.992,110722.992,106628.641,102664.820,98887.656,95308.859,91910.328,88692.219,85682.258,82944.867,80544.555,78505.367,76817.578,75468.539,74481.773,73875.797,73586.922,73440.359,73308.945,73134.734,72965.633,72858.172,72843.133,72924.313,73076.141,73250.680,73406.930,73576.063,73796.844,74089.203,74407.164,74690.531,74903.492,75054.547,75185.813,75341.563,75541.133,75749.578,75888.953,75949.867,76000.633,76101.445,76228.641,76313.016,76327.492,76326.148,76325.375,76274.578,76094.313,75797.203,75481.586,75221.578,74985.078,74701.539,74312.656,73827.891,73281.047,72727.281,72208.109,71729.602,71261.461,70764.828,70197.703,69503.656,68643.281,67594.266,66388.336,65102.672,63812.938,62558.941,61325.402,60054.457,58673.586,57147.297,55465.852,53659.738,51777.234,49885.059,48009.188,46117.398,44145.605,42104.195,40088.250,38207.027,36481.785,34860.633,33293.566,31791.729,30397.828,29108.324,27915.785,26773.896,25682.602,24646.877,23644.059,22624.758,21566.273,20503.254,19506.102,18602.566,17768.453,16959.078,16151.902,15347.288,14552.496,13773.893,13023.696,12318.957,11675.604,11094.017,10550.637,10016.279,9483.787,8981.979,8549.701,8196.413,7897.926,7619.566,7352.567,7106.487,6903.116,6765.912,6714.909,6767.151,6946.125,7296.702,7904.525,8923.844,10623.868,13477.951,18299.023,26387.855,39617.367,60344.738,91040.578,133536.172,188088.469,252499.109,322004.844,389993.656,449398.656,494590.250,523316.531,538048.875,546275.500,558615.750,585471.375,633276.875,701889.938,783082.438,861614.875,920797.938,945780.500,928155.813,867903.750,772696.188,655324.938,530398.875,411033.938,306394.313,221021.203,155382.609,107292.695,73377.367,50110.105,34404.594,23859.473,16746.479,11912.888,8608.891,6338.016,4765.663,3674.814,2928.529,2431.418,2108.013,1900.364,1769.437,1689.095,1639.020,1603.312,1569.877,1531.925,1488.085,1443.109,1404.224,1376.845,1361.435,1355.260,1352.282,1345.198,1329.922,1307.021,1278.538,1244.592,1206.430,1169.811,1141.831,1124.324,1112.874,1103.537,1096.927,1095.414,1098.287,1102.424,1104.619,1102.850,1096.446,1088.347,1084.892,1092.083,1110.359,1134.277,1156.517,1173.935,1190.526,1214.048,1247.675,1284.993,1316.507,1339.705,1361.080,1387.379,1418.515,1449.751,1477.814,1503.039,1528.663,1558.425,1597.620,1651.110,1719.181,1794.068,1862.618,1914.818,1954.426,1999.663,2071.134,2174.117,2293.602,2408.248,2508.325,2601.244,2700.295,2813.232,2939.957,3076.663,3215.874,3346.567,3456.843,3540.905,3601.541,3644.836,3674.979,3697.267,3719.191,3750.896,3803.826,3888.350,4008.466,4153.554,4301.011,4433.945,4556.924,4691.747,4852.205,5031.596,5212.123,5385.825,5558.648,5743.901,5955.210,6205.881,6503.730,6843.298,7208.388,7590.465,8000.229,8454.625,8953.323,9475.734,10002.383,10535.206,11094.313,11696.475,12335.658,12986.514,13620.420,14218.429,14773.166,15287.562,15780.299,16274.324,16791.145,17328.316,17858.688,18354.525,18820.010,19293.359,19814.809,20383.277,20945.988,21444.799,21869.650,22263.961,22676.947,23122.828,23585.193,24035.252,24454.137,24840.258,25202.869,25576.729,26006.762,26532.303,27168.689,27906.957,28732.930,29659.156,30718.717,31926.490,33266.719,34717.941,36298.906,38043.219,39946.672,41946.438,43949.375,45869.777,47622.512,49142.316,50390.840,51345.563,51936.832,52062.898,51639.234,50687.430,49310.742,47631.992,45707.121,43552.684,41188.590,38693.117,36195.977,33842.672,31735.055,29918.715,28388.666,27136.820,26160.564,25481.541,25100.943,24971.072,25011.607,25144.955,25333.738,25570.139,25834.627,26090.434,26283.705,26373.090,26360.092,26251.137,26076.500,25858.160,25610.508,25349.477,25093.055,24868.424,24712.738,24663.781,24734.332,24903.324,25102.336,25274.711,25448.234,25698.660,26092.969,26622.459,27213.371,27804.098,28380.113,28953.813,29520.279,30048.570,30509.955,30886.195,31183.824,31402.543,31543.902,31616.984,31648.871,31647.934,31589.361,31457.527,31284.105,31136.805,31054.982,31028.086,31029.098,31064.750,31191.807,31438.227,31833.047,32376.721,33074.852,33922.477,34892.711,35951.414,37080.473,38274.898,39544.691,40858.926,42150.926,43296.758,44195.625,44789.277,45060.836,44963.660,44458.109,43521.047,42219.750,40644.461,38873.719,36947.336,34912.375,32875.012,30969.623,29301.537,27896.605,26740.299,25825.238,25169.289,24791.678,24683.234,24815.521,25163.424,25712.430,26452.922,27352.309,28366.551,29430.797,30475.143,31419.371,32189.277,32722.021,32986.375,32970.250,32656.895,32003.879,30983.793,29624.883,28000.250,26228.178,24390.852,22532.799,20681.479,18890.682,17243.568,15806.283,14599.494,13600.608,12784.282,12139.834,11677.222,11398.186,11288.080,11311.162,11430.376,11614.541,11850.455,12128.223,12438.554,12765.913,13100.055,13444.936,13812.075,14194.626,14564.488,14897.924,15188.714,15462.763,15733.938,15995.070,16226.531,16402.748,16514.426,16566.035,16578.486,16587.037,16629.592,16724.752,16867.854,17008.455,17105.365,17138.465,17129.475,17113.844,17103.633,17085.338,17036.420,16948.533,16836.004,16731.859,16667.213,16644.326,16651.252,16657.773,16673.045,16724.100,16846.879,17053.586,17338.422,17687.266,18096.445,18562.027,19100.695,19730.273,20469.191,21301.430,22187.115,23091.018,24016.361,24993.164,26051.545,27190.182,28386.365,29600.191,30792.922,31911.311,32920.770,33780.645,34456.742,34901.047,35079.480,34964.453,34544.227,33821.703,32775.398,31398.102,29705.180,27758.143,25627.686,23388.578,21104.924,18843.979,16671.621,14641.369,12785.894,11105.408,9581.551,8206.186,6989.018,5949.694,5089.179,4384.284,3798.317,3300.923,2873.833,2504.730,2183.743,1905.266,1668.983,1473.620,1311.045,1169.036,1038.692,919.302,815.454,730.288,660.748,599.530,542.147,488.561,441.121,400.385,364.657,332.425,304.154,281.253,263.496,248.290,232.480,215.000,197.461,182.455,171.289,163.494,157.759,153.090,148.835,144.440,139.201,132.393,123.830,114.790,108.105,106.413,109.526,114.085,116.025,113.897,109.505,105.723,104.029,104.223,105.428,106.980,108.298,108.643,107.430,104.559,100.333,95.331,90.289,85.882,82.399,80.195,80.145,83.851,92.212,104.258,117.189,127.496,132.262,130.236,122.580,112.561,103.913,98.909,97.546,98.368,99.819,101.136,102.137,102.659,102.564,102.306,102.798,104.262,105.591,105.499,104.297,103.862,105.482,107.961,108.624,106.453,103.531,102.559,103.804,105.226,105.443,104.868,104.235,103.233,101.411,99.021,96.435,93.839,91.712,90.850,0.000};
	for(int i=0;i<1000;i++)//²¢µÀÖ®ºóµÄÇ¦ÊÒ±¾µ×
		RebinedIntrinsicSpectrum[i] = RebinedIntrinsicSpectrum_temp[i];
}
void CSpectrum::SetSpectrumData(vector<UINT32> _SpectrumData)
{ 
	SpectrumOrigin.resize(0);
	SpectrumOrigin=_SpectrumData;
// 	MeasureTime = 0;
// 	LiveTime = 0;
// 	CTime CurrentTime;
// 	CurrentTime=CTime::GetCurrentTime(); 
// 	Str_StartTime=CurrentTime.Format(_T("%Y/%m/%d %X"));
	//assert(SpectrumOrigin.size()==2048);
	if (SpectrumOrigin.size()==2048)
	{
		Preprocess();//»ñÈ¡Êý¾ÝÖ®ºóÖ±½Ó²¢µÀ¼°ÄÜÁ¿¿Ì¶È´¦Àí
	}
	else
	{
		SpectrumData = SpectrumOrigin;
	}
}//ÖØÖÃÆ×Êý¾Ý
UINT32 CSpectrum::GetSpectrumMax()
{
	UINT32 max = 0;
	for (UINT i = 0;i<SpectrumData.size();i++)
		max = SpectrumData[i] > max ? SpectrumData[i] : max;
	return max;
}

void CSpectrum::AddROI(CROI _ROI)
{
	if (GetROINumber() == 0)
	{
		SpectrumROI.push_back(_ROI);
		SetSelectedROIIndex(0);
	}
	else
	{
		UINT i = 0;
		for (i = 0;i<GetROINumber();i++)
		{
			if (_ROI.GetROIStart() < GetSpectrumROI(i).GetROIStart() || (_ROI.GetROIStart() == GetSpectrumROI(i).GetROIStart() && _ROI.GetROIEnd()< GetSpectrumROI(i).GetROIEnd()))
			{
				SpectrumROI.insert(SpectrumROI.begin()+i,_ROI);
				 SetSelectedROIIndex(i);
				break;
			}
		}
		if (i == GetROINumber())//Ã»ÓÐÌí¼ÓROI
		{
			SpectrumROI.push_back(_ROI);
			SetSelectedROIIndex(i);
		}
	}
}

void CSpectrum::DeleteROI(UINT nIndex)
{
	SpectrumROI.erase(SpectrumROI.begin()+nIndex);
}

UINT32 CSpectrum::GetROIMax(UINT Number)
{
//	assert(Number < SpectrumROI.size());
	if (Number < SpectrumROI.size())
	{
		UINT32 max = 0;
		for (UINT i = SpectrumROI[Number].GetROIStart();i <= SpectrumROI[Number].GetROIEnd();i++)
			max = SpectrumData[i] > max ? SpectrumData[i] : max;
		return max;
	}
	else
		return GetSpectrumMax();
}
UINT32 CSpectrum::GetROIMin(UINT Number)
{
	//	assert(Number < SpectrumROI.size());
	if (Number < SpectrumROI.size())
	{
		UINT32 min = SpectrumData[SpectrumROI[Number].GetROIStart()];
		for (UINT i = SpectrumROI[Number].GetROIStart();i <= SpectrumROI[Number].GetROIEnd();i++)
			min= SpectrumData[i] < min ? SpectrumData[i] : min;
		return min;
	}
	else
		return 0;
}
UINT32 CSpectrum::GetElement(UINT i)
{
//	assert( i< SpectrumData.size());
	if (i< SpectrumData.size())
		return	SpectrumData[i];
	else
		return 0;
}
UINT32 CSpectrum::GetElement_LiveSpectrumData(UINT i)
{
	//	assert( i< SpectrumData.size());
	if (i< SpectrumOrigin.size())
		return	SpectrumOrigin[i];
	else
		return 0;
}
UINT32 CSpectrum::GetElement_IntrinsicSpectrumData(UINT i)
{
	//	assert( i< SpectrumData.size());
	if (i< SpectrumIntrinsic.size())
		return	SpectrumIntrinsic[i];
	else
		return 0;
}
float CSpectrum::GetElement_RebinedIntrinsicSpectrum(UINT i)
{
	//	assert( i< SpectrumData.size());
	if (i< RebinedIntrinsicSpectrum.size())
		return	RebinedIntrinsicSpectrum[i];
	else
		return 0;
}
float CSpectrum::GetElement_RebinedLiveSpectrum(UINT i)
{
	//	assert( i< SpectrumData.size());
	if (i< RebinedLiveSpectrum.size())
		return	RebinedLiveSpectrum[i];
	else
		return 0;
}
float CSpectrum::GetElement_SNIP_Background(UINT i)
{
	//	assert( i< SpectrumData.size());
	if (i< SNIP_Background.size())
		return	SNIP_Background[i];
	else
		return 0;
}
float CSpectrum::GetEnergy(UINT i)
{
	//	assert( i< SpectrumData.size());
	float chan = (float)i;
	if (i< SpectrumData.size())
		return	(a*chan*chan+b*chan+c);
	else
		return 0;
}
BOOL CSpectrum::GetSelectedROIIndex(UINT &index)
{
	if (GetROINumber() > 0 && Index_SelectedROI < GetROINumber())
	{
		index = Index_SelectedROI;
		return TRUE;
	}
	else
		return FALSE;
}
const char *CSpectrum::Background1General(float *spectrum, int size,
										  int fNumberIterations,
										  int direction, int filter_order,
										  bool compton) 
{   
	/////////////////////////////////////////////////////////////////////////////
	/*        ONE-DIMENSIONAL BACKGROUND ESTIMATION FUNCTION - GENERAL FUNCTION  */ 
	/*                                                                           */ 
	/*        This function calculates background spectrum from source spectrum. */ 
	/*        The result is placed in the vector pointed by spectrum pointer.    */ 
	/*                                                                           */ 
	/*        Function parameters:                                               */ 
	/*        spectrum-pointer to the vector of source spectrum                  */ 
	/*        size-length of spectrum vector                                     */ 
	/*        fNumberIterations-maximal width of clipping window,             */ 
	/*                           for details we refer to manual                  */ 
	/*        direction- direction of change of clipping window                  */ 
	/*               - possible values=kBackIncreasingWindow                   */ 
	/*                                 kBackDecreasingWindow                   */ 
	/*        filter_order-order of clipping filter,                             */ 
	/*                  -possible values=kBackOrder2                            */ 
	/*                                   kBackOrder4                            */ 
	/*                                   kBackOrder6                            */ 
	/*                                   kBackOrder8                            */ 
	/*        compton- logical variable whether the estimation of Compton edge   */ 
	/*               will be incuded                                             */ 
	/*             - possible values=kBackExcludeCompton                       */ 
	/*                               kBackIncludeCompton                       */ 
	/*                                                                           */ 
	/////////////////////////////////////////////////////////////////////////////
	int i, j, b1, b2, priz;
	float a, b, c, d, e, yb1, yb2, ai;
	if (size <= 0)
		return "Wrong Parameters";
	if (fNumberIterations < 1)
		return "Width of Clipping Window Must Be Positive";
	if (size < 2 * fNumberIterations + 1)
		return "Too Large Clipping Window";
	float *working_space = new float[2 * size];
	for (i = 0; i < size; i++)
		working_space[i + size] = spectrum[i];
	if (direction == kBackIncreasingWindow) {
		if (filter_order == kBackOrder2) {
			for (i = 1; i <= fNumberIterations; i++) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}

		else if (filter_order == kBackOrder4) {
			for (i = 1; i <= fNumberIterations; i++) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					c = 0;
					ai = i / 2;
					c -= working_space[size + j - (int) (2 * ai)] / 6;
					c += 4 * working_space[size + j - (int) ai] / 6;
					c += 4 * working_space[size + j + (int) ai] / 6;
					c -= working_space[size + j + (int) (2 * ai)] / 6;
					if (b < c)
						b = c;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}

		else if (filter_order == kBackOrder6) {
			for (i = 1; i <= fNumberIterations; i++) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					c = 0;
					ai = i / 2;
					c -= working_space[size + j - (int) (2 * ai)] / 6;
					c += 4 * working_space[size + j - (int) ai] / 6;
					c += 4 * working_space[size + j + (int) ai] / 6;
					c -= working_space[size + j + (int) (2 * ai)] / 6;
					d = 0;
					ai = i / 3;
					d += working_space[size + j - (int) (3 * ai)] / 20;
					d -= 6 * working_space[size + j - (int) (2 * ai)] / 20;
					d += 15 * working_space[size + j - (int) ai] / 20;
					d += 15 * working_space[size + j + (int) ai] / 20;
					d -= 6 * working_space[size + j + (int) (2 * ai)] / 20;
					d += working_space[size + j + (int) (3 * ai)] / 20;
					if (b < d)
						b = d;
					if (b < c)
						b = c;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}

		else if (filter_order == kBackOrder8) {
			for (i = 1; i <= fNumberIterations; i++) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					c = 0;
					ai = i / 2;
					c -= working_space[size + j - (int) (2 * ai)] / 6;
					c += 4 * working_space[size + j - (int) ai] / 6;
					c += 4 * working_space[size + j + (int) ai] / 6;
					c -= working_space[size + j + (int) (2 * ai)] / 6;
					d = 0;
					ai = i / 3;
					d += working_space[size + j - (int) (3 * ai)] / 20;
					d -= 6 * working_space[size + j - (int) (2 * ai)] / 20;
					d += 15 * working_space[size + j - (int) ai] / 20;
					d += 15 * working_space[size + j + (int) ai] / 20;
					d -= 6 * working_space[size + j + (int) (2 * ai)] / 20;
					d += working_space[size + j + (int) (3 * ai)] / 20;
					e = 0;
					ai = i / 4;
					e -= working_space[size + j - (int) (4 * ai)] / 70;
					e += 8 * working_space[size + j - (int) (3 * ai)] / 70;
					e -= 28 * working_space[size + j - (int) (2 * ai)] / 70;
					e += 56 * working_space[size + j - (int) ai] / 70;
					e += 56 * working_space[size + j + (int) ai] / 70;
					e -= 28 * working_space[size + j + (int) (2 * ai)] / 70;
					e += 8 * working_space[size + j + (int) (3 * ai)] / 70;
					e -= working_space[size + j + (int) (4 * ai)] / 70;
					if (b < e)
						b = e;
					if (b < d)
						b = d;
					if (b < c)
						b = c;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}
	}

	else if (direction == kBackDecreasingWindow) {
		if (filter_order == kBackOrder2) {
			for (i = fNumberIterations; i >= 1; i--) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}

		else if (filter_order == kBackOrder4) {
			for (i = fNumberIterations; i >= 1; i--) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					c = 0;
					ai = i / 2;
					c -= working_space[size + j - (int) (2 * ai)] / 6;
					c += 4 * working_space[size + j - (int) ai] / 6;
					c += 4 * working_space[size + j + (int) ai] / 6;
					c -= working_space[size + j + (int) (2 * ai)] / 6;
					if (b < c)
						b = c;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}

		else if (filter_order == kBackOrder6) {
			for (i = fNumberIterations; i >= 1; i--) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					c = 0;
					ai = i / 2;
					c -= working_space[size + j - (int) (2 * ai)] / 6;
					c += 4 * working_space[size + j - (int) ai] / 6;
					c += 4 * working_space[size + j + (int) ai] / 6;
					c -= working_space[size + j + (int) (2 * ai)] / 6;
					d = 0;
					ai = i / 3;
					d += working_space[size + j - (int) (3 * ai)] / 20;
					d -= 6 * working_space[size + j - (int) (2 * ai)] / 20;
					d += 15 * working_space[size + j - (int) ai] / 20;
					d += 15 * working_space[size + j + (int) ai] / 20;
					d -= 6 * working_space[size + j + (int) (2 * ai)] / 20;
					d += working_space[size + j + (int) (3 * ai)] / 20;
					if (b < d)
						b = d;
					if (b < c)
						b = c;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}

		else if (filter_order == kBackOrder8) {
			for (i = fNumberIterations; i >= 1; i--) {
				for (j = i; j < size - i; j++) {
					a = working_space[size + j];
					b = (working_space[size + j - i] +
						working_space[size + j + i]) / 2.0;
					c = 0;
					ai = i / 2;
					c -= working_space[size + j - (int) (2 * ai)] / 6;
					c += 4 * working_space[size + j - (int) ai] / 6;
					c += 4 * working_space[size + j + (int) ai] / 6;
					c -= working_space[size + j + (int) (2 * ai)] / 6;
					d = 0;
					ai = i / 3;
					d += working_space[size + j - (int) (3 * ai)] / 20;
					d -= 6 * working_space[size + j - (int) (2 * ai)] / 20;
					d += 15 * working_space[size + j - (int) ai] / 20;
					d += 15 * working_space[size + j + (int) ai] / 20;
					d -= 6 * working_space[size + j + (int) (2 * ai)] / 20;
					d += working_space[size + j + (int) (3 * ai)] / 20;
					e = 0;
					ai = i / 4;
					e -= working_space[size + j - (int) (4 * ai)] / 70;
					e += 8 * working_space[size + j - (int) (3 * ai)] / 70;
					e -= 28 * working_space[size + j - (int) (2 * ai)] / 70;
					e += 56 * working_space[size + j - (int) ai] / 70;
					e += 56 * working_space[size + j + (int) ai] / 70;
					e -= 28 * working_space[size + j + (int) (2 * ai)] / 70;
					e += 8 * working_space[size + j + (int) (3 * ai)] / 70;
					e -= working_space[size + j + (int) (4 * ai)] / 70;
					if (b < e)
						b = e;
					if (b < d)
						b = d;
					if (b < c)
						b = c;
					if (b < a)
						a = b;
					working_space[j] = a;
				}
				for (j = i; j < size - i; j++)
					working_space[size + j] = working_space[j];
			}
		}
	}
	if (compton == kBackIncludeCompton) {
		for (i = 0, b2 = 0; i < size; i++) {
			b1 = b2;
			a = working_space[i], b = spectrum[i];
			j = i;
			if (abs(a - b) >= 1) {
				b1 = i - 1;
				if (b1 < 0)
					b1 = 0;
				yb1 = spectrum[b1];
				for (b2 = b1 + 1, c = 0, priz = 0; priz == 0 && b2 < size;
					b2++) {
						a = working_space[b2], b = spectrum[b2];
						c = c + b - yb1;
						if (abs(a - b) < 1) {
							priz = 1;
							yb2 = b;
						}
				}
				if (b2 == size)
					b2 -= 1;
				yb2 = spectrum[b2];
				if (yb1 <= yb2) {
					for (j = b1, c = 0; j <= b2; j++) {
						b = spectrum[j];
						c = c + b - yb1;
					}
					if (c > 1) {
						c = (yb2 - yb1) / c;
						for (j = b1, d = 0; j <= b2 && j < size; j++) {
							b = spectrum[j];
							d = d + b - yb1;
							a = c * d + yb1;
							if (a < spectrum[j])
								working_space[size + j] = a;
						}
					}
				}

				else {
					for (j = b2, c = 0; j >= b1; j--) {
						b = spectrum[j];
						c = c + b - yb2;
					}
					if (c > 1) {
						c = (yb1 - yb2) / c;
						for (j = b2, d = 0; j >= b1 && j >= 0; j--) {
							b = spectrum[j];
							d = d + b - yb2;
							a = c * d + yb2;
							if (a < spectrum[j])
								working_space[size + j] = a;
						}
					}
				}
				i = b2;
			}
		}
	}
	for (j = 0; j < size; j++)
		spectrum[j] = working_space[size + j];
	delete[]working_space;
	return 0;
}

const char *CSpectrum::Rebin(float *energy_in,float *spectrum_in,
							 vector<float> &spectrum_out,
							 int size,float width)
{
	vector<float> energy_out;
	int size1 = ceil(3000/width);
	energy_out.resize(0);
	spectrum_out.resize(0);//ÏÈÇåÁã£¬·ñÔò»áÔì³ÉÄÜÆ×ÀÛ¼Ó
	energy_out.resize(size1);
	spectrum_out.resize(size1);
	for (int i=0;i<size1;i++)
	{
		energy_out[i] = i*width;
	}
	int start_in,start_out;//ÊäÈëÊä³öÄÜÆ×½Úµã
	if (energy_in[0]<energy_out[0])
	{
		start_in = 0;
		start_out = 0;
		while (energy_in[start_in+1]<energy_out[0])
		{
			start_in++;
		}
	}
	else
	{
		start_in = 0;
		start_out = 0;
		while (energy_out[start_out]<energy_in[0])
		{
			start_out++;
		}
		spectrum_out[start_out-1] = spectrum_in[start_in];
		while (energy_in[start_in+1]<energy_out[start_out])
		{
			start_in++;
		}
		for (int m=0;m<start_in;m++)
		{
			spectrum_out[start_out-1] =spectrum_out[start_out-1] + spectrum_in[m];
		}
		spectrum_out[start_out-1] =spectrum_out[start_out-1] + spectrum_in[start_in]*(energy_out[start_out]-energy_in[start_in])/(energy_in[start_in+1]-energy_in[start_in]);
	}
	int k=start_in;
	for (int j=start_out;j<size1-1;j++)
	{
		if (k>size-2)
			break;
		spectrum_out[j] = spectrum_out[j] + spectrum_in[k]*(energy_in[k+1]-energy_out[j])/(energy_in[k+1]-energy_in[k]);
		k++;
		if (k>size-2)
			break;
		while (energy_in[k+1]<energy_out[j+1])
		{
			spectrum_out[j] = spectrum_out[j] + spectrum_in[k];
			k++;
			if (k>size-2)
				break;
		}
		if (j==size1-2)
		{
			int iii=3;
		}
		spectrum_out[j] = spectrum_out[j] + spectrum_in[k]*(energy_out[j+1]-energy_in[k])/(energy_in[k+1]-energy_in[k]);
	}	

	//int j=0;
	//double L,R;
	//while (energy_in[j]<energy_out[0]&&energy_in[j+1]>=energy_out[0])
	//	j=j+1;
	//spectrum_out[0] = 
	//for (int i=1;i<size1;i++)
	//{
	//	spectrum_out[]
	//	L = energy_out[i-1];
	//	R = energy_in[j];
	//	spectrum_out[i]=spectrum_out[i]+spectrum_in[j]*(R-L)/
	//}
	//int size1 = ceil((energy_in[size-1]-energy_in[0])/width);
	//energy_out.resize(size1);
	//spectrum_out.resize(size1);
	//int j = 0;
	//int i;
	//for (i=0;i<size1-1;i++)
	//{
	//energy_out[i] = energy_in[0] + width*i + 0.5*width;
	//spectrum_out[i] = spectrum_out[i] + spectrum_in[j]*(energy_in[j+1]-energy_out[i]+0.5*width)/(energy_in[j+1]-energy_in[j]);
	//j++;
	//while (energy_in[j+1]<energy_out[i] + 0.5*width)
	//{
	//spectrum_out[i] = spectrum_out[i] + spectrum_in[j];
	//j++;
	//}
	//spectrum_out[i] = spectrum_out[i] + spectrum_in[j]*(energy_out[i]+0.5*width-energy_in[j])/(energy_in[j+1]-energy_in[j]);
	//}
	//energy_out[size1-1] = energy_in[0] + width*i + 0.5*width;
	//spectrum_out[size1-1] = spectrum_out[size1-1] + spectrum_in[j]*(energy_in[j+1]-energy_out[i]+0.5*width)/(energy_in[j+1]-energy_in[j]);
	//for (int k=j;k<size;k++)
	//{
	//spectrum_out[size1-1] = spectrum_out[size1-1] + spectrum_in[k];
	//}
	return 0;
}

const char *CSpectrum::Smooth(float *spectrum,int size,int smooth_order,int num) 
{
	//Æ½»¬´¦Àí,smooth_orderÈ¡ÖµÎªSmoothOrder3=3,SmoothOrder5=5,SmoothOrder7=7,numÎªÆ½»¬´ÎÊý
	float *working_space = new float[2 * size];
	for (int j=0;j<size;j++)
		working_space[j]=spectrum[j];
	for (int i=0;i<num;i++)
	{
		if (smooth_order==SmoothOrder5)
		{
			working_space[size] = (69*working_space[0]+4*working_space[1]-6*working_space[2]+working_space[3]-working_space[4])/70;
			working_space[size+1] = (2*working_space[0]+27*working_space[1]+12*working_space[2]-8*working_space[3]+2*working_space[4])/35;
			for(int j=2;j<size-2;j++)
				working_space[size+j] = (-3*working_space[j-2]+12*working_space[j-1]+17*working_space[j]+12*working_space[j+1]-3*working_space[j+2])/35;
			working_space[2*size-2] = (2*working_space[size-5]-8*working_space[size-4]+12*working_space[size-3]+27*working_space[size-2]+2*working_space[size-1])/35;
			working_space[2*size-1] = (-working_space[size-5]+4*working_space[size-4]-6*working_space[size-3]+4*working_space[size-2]+69*working_space[size-1])/70;
		} 
		else if (smooth_order==SmoothOrder7)
		{
			working_space[size] = (39*working_space[0]+8*working_space[1]-4*working_space[2]-4*working_space[3]
			+working_space[4]+4*working_space[5]-2*working_space[6])/42;
			working_space[size+1] = (8*working_space[0]+19*working_space[1]+16*working_space[2]+6*working_space[3]
			-4*working_space[4]-7*working_space[5]+4*working_space[6])/42;
			working_space[size+2] = (-4*working_space[0]+16*working_space[1]+19*working_space[2]+12*working_space[3]
			+2*working_space[4]-4*working_space[5]+1*working_space[6])/42;
			for (int j=3;j<size-3;j++)
			{
				working_space[size+j] = (-2*(working_space[j-3]+working_space[j+3])+3*(working_space[j-2]+working_space[j+2])
					+6*(working_space[j-1]+working_space[j+1])+7*working_space[j])/21;
			}
			working_space[2*size-3] = (-4*working_space[size-1]+16*working_space[size-2]+19*working_space[size-3]
			+12*working_space[size-4]+2*working_space[size-5]-4*working_space[size-6]+1*working_space[size-7])/42;
			working_space[2*size-2] = (8*working_space[size-1]+19*working_space[size-2]+16*working_space[size-3]
			+6*working_space[size-4]+4*working_space[size-5]-7*working_space[size-6]+4*working_space[size-7])/42;
			working_space[2*size-1] = (39*working_space[size-1]+8*working_space[size-2]-4*working_space[size-3]+
				4*working_space[size-4]+1*working_space[size-5]+4*working_space[size-6]-2*working_space[size-7])/42;
		}
		for (int j=0;j<size;j++){
			working_space[j]=working_space[size+j];
		}
	}
	for (int j=0;j<size;j++)
	{
		if (working_space[size + j]>0)
		{
			spectrum[j] = working_space[size + j];
		}
	}
	delete[]working_space;
	return 0;
}


#define NUM3 3
#define NUM4 4
#define NUM5 5//ÓÃÓÚ¶þ½×¶àÏîÊ½ÄâºÏµÄ½ÚµãµÄ¸öÊý
const char *CSpectrum::polyfit2_3(float *x,float *y,vector<float> &coefficient)
{	
	coefficient.resize(N);
	//coefficient[2]=((x[0]-x[2])*(y[0]-y[1])-(x[0]-x[1])*(y[0]-y[2]))/((x[0]-x[2])*(x[0]*x[0]-x[1]*x[1])-(x[0]*x[0]-x[2]*x[2])*(x[0]-x[1]));
	//coefficient[1]=((x[0]-x[2])*(y[0]-y[1])-coefficient[2]*(x[0]*x[0]-x[1]*x[1])*(x[0]-x[2]))/(x[0]-x[1]);
	//coefficient[0]=y[0]-coefficient[1]*x[0]-coefficient[2]*x[0]*x[0];
	double a[N][NUM3];
	double b[N][N+1];
	double c[N];
	f1(a[0],x,N,NUM3);
	f2(a[0],b[0],y,N,NUM3);
	DirectLU(b,c); //ÁÐÖ÷ÔªLU·Ö½â
	for (int i=0;i<N;i++)
	{
		coefficient[i]=c[i];
	}
	return 0;
}

//const char *CSpectrum::polyval2(float *y,int size,vector<float> &coefficient)
//{
//	for (int i=0;i<size;i++)
//	{
//		y[i] = coefficient[2]*y[i]*y[i]+coefficient[1]*y[i]+coefficient[0];
//	}
//	return 0;
//}

const char *CSpectrum::polyfit2_4(float *x,float *y,vector<float> &coefficient)
{	
	coefficient.resize(N);
	double a[N][NUM4];
	double b[N][N+1];
	double c[N];
	f1(a[0],x,N,NUM4);
	f2(a[0],b[0],y,N,NUM4);
	DirectLU(b,c); //ÁÐÖ÷ÔªLU·Ö½â
	for (int i=0;i<N;i++)
	{
		coefficient[i]=c[i];
	}
	return 0;
}

float CSpectrum::SearchMaxPosition(float *x,float *y,int min,int max)
{
	float position = min;
	for (int i=min;i<max;i++)
	{
		if (y[i]>y[int(position)])
		{
			position = i;
		}
	}
	return position+x[0];
}

void CSpectrum::f1(double *a,float *x,int n,int num)
{
	int i,j,k;
	double temp;
	for(i=0;i<n;i++)
		for(j=0;j<num;j++)
		{
			temp=1;
			for(k=0;k<i;k++)
				temp*=x[j];
			*(a+i*num+j)=temp;
		}
}

void CSpectrum::f2(double *a,double *b,float y[],int n,int num)
{
	int i,j,k;
	double temp2;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			temp2=0;
			for(k=0;k<num;k++)
				temp2+=*(a+i*num+k)*(*(a+j*num+k));
			*(b+i*(n+1)+j)=temp2;
		}
		temp2=0;
		for(k=0;k<num;k++)
		{
			temp2+=y[k]*(*(a+i*num+k));
			*(b+i*(n+1)+n)=temp2;
		}
	}
}

void CSpectrum::swap(double &a,double &b)
{
	a=a+b;//Êý¾ÝÔ½½çÕ¦°ì£¿
	b=a-b;
	a=a-b;
}

void CSpectrum::DirectLU(double a[N][N+1],double x[])
{
	int i,r,k,j;
	double s[N],t[N];
	double max;
	for(r=0;r<N;r++)
	{
		max=0;
		j=r;
		for(i=r;i<N;i++) //ÇóÊÇs[i]µÄ¾ø¶ÔÖµ,Ñ¡Ö÷Ôª
		{
			s[i]=a[i][r];
			for(k=0;k<r;k++)
				s[i]-=a[i][k]*a[k][r];
			s[i]=s[i]>0?s[i]:-s[i]; //s[i]È¡¾ø¶ÔÖµ
			if(s[i]>max){
				j=i;
				max=s[i];
			}
		}
		if(j!=r) //Ñ¡³öµÄÖ÷ÔªËùÔÚÐÐjÈô²»ÊÇr,Ôò¶ÔÁ½ÐÐÏàÓ¦ÔªËØ½øÐÐµ÷»»
		{
			for(i=0;i<N+1;i++)
				swap(a[r][i],a[j][i]);
		}
		for(i=r;i<N+1;i++) //¼ÇËãµÚrÐÐµÄÔªËØ
			for(k=0;k<r;k++){
				a[r][i]-=a[r][k]*a[k][i];
			}
			for(i=r+1;i<N;i++) //¼ÇËãµÚrÁÐµÄÔªËØ
			{
				for(k=0;k<r;k++)
					a[i][r]-=a[i][k]*a[k][r];
				a[i][r]/=a[r][r];
			}
	}
	for(i=0;i<N;i++)
		t[i]=a[i][N];
	for(i=N-1;i>=0;i--) //ÀûÓÃ»Ø´ú·¨Çó×îÖÕ½â
	{
		for(r=N-1;r>i;r--)
			t[i]-=a[i][r]*x[r];
		x[i]=t[i]/a[i][i];
	}
}
void CSpectrum::Preprocess(void)
{
	const int num=2048;
// 	//±¾µ×²âÁ¿Ê±¼ä
// 	const int IntrinsicTime = 241974;
	float Channel[num]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048};
	//±¾µ×Êý¾Ý£¬ÓÃÓÚ±ê¶¨
	float IntrinsicSpectrum[num]={0,0,0,0,0,0,0,0,0,0,115233,249508,251548,263727,279345,293812,298126,292646,286244,285165,338742,635886,1703615,4018869,6688680,7132298,4951159,2245556,759167,303398,222607,210352,206635,204059,201908,200172,200013,197182,197216,196974,197268,196728,197429,197812,198214,197812,198476,199299,202457,204035,206596,204099,201885,197830,194103,192281,191098,189766,190304,190462,189600,188325,186647,184818,183301,181770,180617,182252,182307,180988,180164,179783,179462,177568,177916,177500,177815,176908,176010,174739,173983,173122,173207,171542,171982,171791,171241,170486,170937,166427,166836,164898,163874,162563,162621,162232,162561,160112,159657,157543,156959,155398,154640,154035,153671,151060,150789,149571,148718,147342,146965,144981,143801,142923,143313,142031,141353,139838,139469,138226,137477,134661,134105,133635,131894,130132,129425,128612,127852,124805,124261,122864,122789,120364,120495,119095,118362,116044,114696,113670,112687,111019,109880,108565,107144,104795,104069,102308,101836,99598,98689,97880,98858,95462,94949,94450,92572,91127,89307,88917,87894,85811,85130,83861,82191,81177,79874,78492,78288,76709,75371,74630,74180,73187,72982,72683,71895,71522,71090,70338,70022,69379,69440,68603,68909,67137,67518,67743,67452,66893,66958,66915,67119,66288,65959,66010,66194,65655,65231,65013,64890,64926,64909,64474,64821,64395,63957,63957,64229,64246,63934,63490,63060,63704,62885,63153,63553,63144,61928,62460,62063,62670,62149,61716,62108,62213,61538,61454,61647,61457,61195,61646,61607,62039,60834,61403,61650,61411,61709,61410,61602,61196,61066,61600,61534,62345,61515,61124,60600,61510,60188,60537,60475,59975,59930,60726,60276,60351,60173,60187,59814,60197,60277,60634,60506,60733,60090,60534,60046,60487,59588,60052,60692,60496,59540,59703,59813,60453,59590,59550,59555,60248,59278,59222,59598,59766,59571,59972,59685,59524,59331,59248,59092,59523,58956,58975,58575,58854,58225,58228,58565,58606,58579,57778,58604,58726,58688,59103,59508,59579,59419,59859,59781,59642,59206,59013,59400,58614,58896,58772,58464,58706,58155,58299,57567,58437,58040,58082,57765,58200,57477,57727,57905,57226,57817,57301,57361,57486,58045,57453,57758,57789,57463,57532,58096,58870,58758,58123,58777,58828,59270,59437,59151,59195,59437,59239,58992,58862,58607,58018,57912,57653,57194,56544,56745,56570,56771,56684,56721,56638,56509,56292,56844,56905,56991,56996,57424,57558,57514,56703,56826,56918,57066,56830,56973,56733,56528,56454,56740,56393,56624,56530,56605,56711,56776,56194,56233,56051,56527,56278,56193,55987,56358,55942,56507,55788,55957,55396,55889,55932,56488,55628,55527,55085,55473,55354,54717,54880,54954,54258,54427,54160,54191,53632,53252,53573,53746,52891,51917,52188,51978,51734,51810,51667,51949,50916,51351,50618,50563,50166,49845,49839,50110,49543,49119,48950,49269,49220,48721,48976,48378,48452,47735,47846,48100,48160,47538,47261,47737,46766,46529,46687,46711,46372,46103,46131,45718,45765,45476,45024,45074,45383,44110,44024,44399,44122,43892,43596,43488,43005,42740,42470,42282,42234,41754,42073,41679,41474,41313,41375,41549,41116,40622,40951,40784,40637,40076,39888,40042,40037,38854,39458,39112,39221,38652,38924,38447,38182,38215,38267,38111,37866,37911,37811,37751,37334,37341,37253,37179,37002,36892,36870,37116,37176,36995,37383,37163,37149,37416,37720,37881,39244,39773,41476,42995,45895,48898,52896,58271,64530,70065,78044,85915,94844,101916,111305,118615,125568,131097,137547,141771,145493,147841,150852,151583,152843,151685,153661,152988,153604,152885,152144,151381,152062,149626,150438,149166,150095,148681,148600,147861,148814,145094,146341,145890,144822,143476,144083,143124,143898,141925,142073,142555,141513,139927,139956,139807,139405,137796,137661,137244,137349,135538,135532,134938,135564,134226,134042,133614,132692,132214,131710,131516,131189,130422,128452,129408,128624,127575,126500,125978,125968,124832,124296,124288,123541,123363,121698,122284,121862,120823,118592,119338,119021,119305,117275,116534,116857,116337,115186,114633,114699,113933,113043,113131,113019,112760,111749,111834,111390,111102,109919,109951,108594,109029,106800,106845,106777,105193,104099,103226,102771,101916,100831,101597,100435,100092,99224,98677,98430,98661,97802,97050,96149,95874,94187,92997,92470,92529,88266,88699,86194,84940,82887,82074,80535,79433,77407,76926,75027,74512,72355,72174,70409,70106,68240,67280,66119,65623,63786,63272,62008,61037,59564,58902,57920,57159,55141,54898,54021,53655,51304,50973,49417,49657,47749,47593,46983,45468,44648,44055,43328,42915,41995,41119,40410,40262,39254,38754,38571,38204,37377,37383,37044,36809,36337,36150,36134,35959,35857,35983,35720,36709,35626,35716,35711,35841,35353,35731,35639,36178,35236,35477,35524,35894,35453,35776,35926,35812,36039,35693,36100,35945,35783,36201,36167,36249,36095,36598,36366,36896,36270,36814,36349,36978,36745,36517,37126,37051,36457,36936,36874,36983,37540,36949,37250,37356,37048,37118,36932,37434,37082,37367,37179,37660,37530,37131,37633,37286,36928,37298,37476,37580,37419,37259,37190,37549,37178,36612,36771,37051,36781,36811,36666,36952,36725,36466,36059,36324,36387,35948,36139,35984,35460,35222,35688,34963,35464,34917,35016,35153,34810,34047,34533,34350,34417,33855,33734,33781,33346,32754,32777,32460,32165,31879,31396,31241,30892,30475,30268,29969,29767,29501,29116,28714,28497,27783,27483,27325,26990,26166,25815,25455,25038,24318,24049,23520,23252,22511,22293,21838,21714,20510,20216,19684,19370,18511,18607,18067,17781,17101,17039,16427,16275,15510,15405,15061,14813,14431,14108,13875,13599,13407,12980,12739,12605,12140,12031,11693,11637,11241,11083,10951,10633,10216,9930,9656,9496,9308,9118,9064,8807,8386,8259,8163,7994,7682,7539,7462,7027,7002,6926,6470,6389,6310,6050,5974,5722,5594,5498,5302,5228,5109,4955,4893,4804,4613,4323,4224,4274,4170,4094,3943,3981,3865,3724,3717,3681,3625,3500,3458,3409,3430,3299,3326,3306,3279,3391,3249,3396,3510,3557,3515,3803,3993,4190,4515,4816,5463,5944,6821,7872,9210,11178,12966,15858,19181,23666,29029,35765,43373,52693,62847,75834,89179,103940,121375,138179,154894,172083,188868,205723,219969,231327,243226,252330,258696,262100,265590,269458,269693,267069,271916,276084,282153,289947,302902,316544,335236,350869,374183,394284,415178,431233,451505,462667,470336,466273,467745,457343,444964,421716,401501,373602,347041,312175,283266,252012,224201,193856,168516,144386,124687,103912,88308,74287,62098,51271,42881,35749,29626,24137,20629,17123,14280,11828,9925,8471,7183,5886,5005,4313,3779,3258,2794,2444,2041,1858,1667,1415,1401,1208,1097,1110,1044,926,837,923,876,823,834,811,821,773,817,746,776,762,752,768,739,707,690,678,673,709,713,650,673,667,638,678,652,714,660,659,671,617,642,623,657,599,647,613,579,574,578,555,570,576,516,552,572,571,541,556,510,501,549,598,527,532,574,534,500,568,572,516,572,532,560,506,544,513,541,549,559,563,556,549,564,578,608,599,577,578,609,580,597,612,676,656,647,662,657,648,672,685,664,712,675,718,725,727,733,732,722,745,747,797,768,774,772,756,844,837,802,903,859,845,934,991,926,948,960,980,988,988,987,1053,993,1059,1192,1132,1181,1226,1214,1279,1228,1248,1393,1323,1352,1371,1459,1509,1451,1512,1555,1666,1536,1709,1708,1714,1742,1792,1757,1750,1779,1813,1832,1893,1807,1808,1776,1875,1884,1875,1869,1840,1880,1965,1979,1957,1983,2043,2097,2132,2221,2257,2223,2221,2191,2381,2337,2436,2394,2464,2568,2637,2641,2630,2695,2709,2809,2789,3015,2913,3017,2948,3150,3235,3251,3418,3409,3580,3620,3772,3895,3921,3997,4080,4309,4304,4571,4820,4740,4864,5012,5229,5350,5403,5542,5752,5860,6122,6154,6440,6484,6729,6816,7031,7096,7372,7386,7415,7698,7798,7961,8005,8080,8230,8466,8480,8617,8761,9129,8996,9177,9408,9266,9405,9740,9782,9882,9947,10162,10264,10535,10700,10804,10804,10882,10908,11019,11176,11385,11350,11667,11603,11796,11805,11957,12046,12280,12250,12583,12450,12338,12626,12936,12721,13081,13037,13140,13416,13530,13728,13793,14355,14334,14514,14742,15209,15305,15373,15745,16486,16735,17041,17375,17690,17906,18488,18958,19443,19985,20339,21106,21696,21471,22407,22977,23349,23747,24209,24460,25021,24997,25276,25693,25508,25852,25941,26318,26089,25562,25577,25068,25003,24597,24075,23922,23204,22422,22540,21830,21192,20471,19910,19414,18696,17796,17616,16846,16283,15774,15361,15074,14456,13927,14029,13645,13227,13033,12826,12740,12588,12228,12597,12454,12583,12473,12462,12399,12829,12573,12589,12772,12774,12858,12873,13064,13356,12948,13006,13084,13518,12991,13172,12972,13263,12934,12886,12801,13246,12696,12415,12575,13183,12350,12342,12227,12544,12407,12370,12149,12360,12305,12325,12410,12452,12478,12693,12853,12722,12550,12606,12758,12980,12886,13109,13257,13590,13452,13807,13872,14019,14131,14096,14617,14681,14391,14941,15029,15331,15129,15260,15404,15573,15432,15713,15644,15884,15597,15843,15795,15961,15715,15776,15525,16069,15787,15870,15784,15795,15460,15609,15639,15433,15363,15505,15496,16029,15430,15395,15437,15491,15581,15586,15771,15998,15715,16109,16017,16311,16501,16703,16895,17245,17338,17727,17863,18281,18349,18812,19023,19825,19416,19844,20381,20905,20947,21166,21651,22251,22082,22089,22465,22523,22245,22762,22535,22620,22099,22343,21787,21713,21161,20519,20564,20087,19470,19091,18497,18424,17543,16972,16391,16306,15364,15204,14532,14433,13964,13769,13372,13551,13000,12376,12510,12508,12639,12391,12344,12375,12395,12415,12626,12688,12901,13060,13247,13413,13582,13839,14274,14457,14847,14929,15261,15361,15844,15780,16242,16531,16294,16406,16504,16698,16518,16390,16282,16420,16125,15872,15557,15249,15069,14268,14073,13753,13155,12717,11992,11833,11453,10753,10713,9839,9467,8797,8614,8403,8016,7452,7261,7174,6854,6497,6481,6191,6205,5825,5928,5625,5860,5576,5569,5872,5659,5618,5740,5822,5810,5885,6024,6021,6096,6083,6231,6366,6478,6506,6652,6648,6694,6855,6973,6994,7068,7318,7378,7498,7534,7387,7719,7744,7717,7875,7863,7976,8161,8028,8209,8184,8264,8316,8288,8418,8244,8183,8555,8335,8339,8207,8356,8435,8412,8459,8365,8549,8693,8607,8518,8700,8740,8428,8654,8629,8489,8620,8642,8634,8599,8548,8545,8610,8500,8497,8405,8462,8502,8198,8394,8464,8385,8217,8449,8359,8627,8321,8393,8261,8420,8373,8613,8672,8545,8601,8801,8839,9025,9047,9157,9268,9404,9635,9695,9835,10053,10138,10413,10638,10910,11016,11332,11797,11725,11962,12168,12564,12701,12896,13408,13744,13970,14094,14352,14818,15397,15351,15561,16214,16442,16261,16748,17060,17265,17242,17609,17426,17671,17751,17613,17725,17762,17187,17289,17035,16712,16704,16368,15967,15497,14734,14536,14087,13587,12772,12507,11796,11235,10612,9944,9409,9145,8390,7712,7361,6880,6330,5933,5638,5187,4784,4424,4173,3729,3427,3174,2953,2755,2500,2372,2129,2061,1925,1728,1650,1538,1372,1293,1284,1222,1068,976,922,894,830,720,772,695,625,620,593,525,518,511,425,430,388,380,344,352,328,328,286,299,254,222,273,226,219,181,193,208,197,158,167,130,162,143,154,122,123,128,131,111,126,119,97,96,89,92,99,91,73,87,82,81,79,73,84,70,67,87,68,69,72,61,63,71,61,61,54,53,47,55,49,55,58,60,68,60,55,57,56,53,54,57,50,43,61,52,59,52,52,49,54,52,64,59,59,44,43,56,67,52,37,48,43,54,46,38,38,41,46,37,51,39,37,35,44,53,53,54,62,60,61,72,56,70,77,75,52,60,53,53,55,52,52,48,50,39,52,63,45,53,55,40,53,59,45,56,56,49,56,49,50,46,54,53,65,49,56,53,54,46,52,52,61,52,38,70,53,64,62,45,53,40,39,51,70,65,62,40,44,52,54,48,60,64,52,49,40,51,49,57,41,58,49,44,45,35,49,45,60,41,47,47,51,45,48,45,46,54,49,49,36,42,49,37,53,48,37,41,44};
	float SeawaterSpectrum[num];//ÌáÈ¡³öÊµ²âÆ×
	for (UINT32 i=0;i<num;i++)
	{
		if (i<SpectrumOrigin.size())
		{
			SeawaterSpectrum[i] = (float)SpectrumOrigin[i];
		}
	}
	float *Ch = Channel;
	float *Pb = IntrinsicSpectrum;
	float *Sea = SeawaterSpectrum;
	const char *useless;
	useless = Smooth(Pb,num,SmoothOrder7,30);//10´Î7µãÆ½»¬
	useless = Smooth(Sea,num,SmoothOrder7,30);//10´Î7µãÆ½»¬
	float peakposition[3];
	peakposition[0]=SearchMaxPosition(Ch,Pb,15,40);
	peakposition[1]=SearchMaxPosition(Ch,Pb,900,1100);
	peakposition[2]=SearchMaxPosition(Ch,Pb,1700,1900);
	float peakposition1[3];
	peakposition1[0]=SearchMaxPosition(Ch,Sea,15,40);
	peakposition1[1]=SearchMaxPosition(Ch,Sea,900,1100);
	peakposition1[2]=SearchMaxPosition(Ch,Sea,1700,1900);
	vector<float> coe;
	float *x = peakposition1;
	float *y = peakposition;
	useless = polyfit2_3(x,y,coe);
	float Channel1[2048];
	for (int i=0;i<2048;i++)
	{
		Channel1[i]=coe[2]*Channel[i]*Channel[i]+coe[1]*Channel[i]+coe[0];
	}
	//int a = s.SearchMaxPosition(energy,spectrum,15,40);
	float E[2048],E1[2048];
	for (int i=0;i<2048;i++)
	{
		E[i]=a0*Channel[i]*Channel[i]+b0*Channel[i]+c0;
		E1[i]=a0*Channel1[i]*Channel1[i]+b0*Channel1[i]+c0;
	}
/*	useless=Rebin(E,Pb,en_Pb,spe_Pb,num,3.0);*/
	//ÊäÈëÄÜÆ×µÄÄÜÁ¿ºÍ¼ÆÊý£¬Êä³öÄÜÆ×ÎªÄÜÁ¿²¢µÀÖ®ºóµÄÄÜÆ×£¬3.0Îª²¢µÀÖ®ºóµÄµÀ¿í£¬×î¸ßÄÜÁ¿Îª3MeV£¬¼´´ËÊ±Êä³öÎª1000µÀ
	useless=Rebin(E1,Sea,RebinedLiveSpectrum,num,3.0);
	//½«1000µÀÊý¾Ý²åÖµÎª3000µÀ£¬ÓÃÓÚÏÔÊ¾SpectrumData
	SpectrumData.resize(0);
	float a,b1,b2,c;
	for (UINT i = 0;i<999;i++)
	{
		a = RebinedLiveSpectrum[i];
		c = RebinedLiveSpectrum[i+1];
		b1 = (UINT32)(2*a/3+c/3);
		b2 = (UINT32)(a/3+c*2/3);
		SpectrumData.push_back((UINT32)a);
		SpectrumData.push_back((UINT32)b1);
		SpectrumData.push_back((UINT32)b2);
	}
	SpectrumData.push_back((UINT32)RebinedLiveSpectrum[999]);
	SpectrumData.push_back((UINT32)RebinedLiveSpectrum[999]);
	SpectrumData.push_back((UINT32)RebinedLiveSpectrum[999]);
	Activity_Cs = CalculateActivity(Cs137);
	Activity_Cs = (float)((int)(Activity_Cs*100))/100;
	CROI ROI_temp(630,700);
	AddROI(ROI_temp);
	
// 	if (Cs_activity > 0.2)
// 	{
// // 		CWaringDlg warning;
// // 		warning.DoModal();
// 	}
}
float CSpectrum::CalculateActivity(int nuclide)
{
	float Activity = 0;
	if (nuclide == Cs137)//RebinedSpectrumÊÇ²¢µÀÖ®ºóµÄÆ×Êý¾Ý£¬1000µÀ
	{
		float *background=new float[RebinedLiveSpectrum.size()];
		for (int i=0;i<RebinedLiveSpectrum.size();i++)
		{
			background[i]=RebinedLiveSpectrum[i];
		}
		const char *useless = NULL;
		float Energy_Centroid = 662;//keV
		float sigma = Energy_Centroid*0.03/2.355;
		float PeakArea_sigma = 5;
		float BinWidth = 3;//µÀ¿í3keV
		int m_window = (int)((sigma*PeakArea_sigma/BinWidth - 1)/2);//2m+1Îª·å¿í
		useless = Background1General(background,RebinedLiveSpectrum.size(),m_window,kBackDecreasingWindow,kBackOrder2,false); //sp
		SNIP_Background.resize(RebinedLiveSpectrum.size());
		for (int i=0;i<RebinedLiveSpectrum.size();i++)
		{
			SNIP_Background[i]=background[i];
		}
		for (int i=ceil((Energy_Centroid-PeakArea_sigma*sigma/2)/BinWidth);i<floor((Energy_Centroid+PeakArea_sigma*sigma/2)/BinWidth);i++)
		{
			Activity = Activity + RebinedLiveSpectrum[i] - background[i];
		}
		if (LiveTime)
		{
			Activity = Activity/LiveTime/0.264;
		}	
		else
			Activity = 0;
	}
	return Activity;
}